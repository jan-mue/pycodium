[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "pycodium"
description = "A Python IDE written in Python"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Jan MÃ¼ller", email = "" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
]
dynamic = [ "version" ]
dependencies = [
    # Web framework used for the GUI
    "reflex==0.7.14",
]

urls.Changelog = "https://github.com/jan-mue/pycodium/releases"
urls.Documentation = "https://github.com/jan-mue/pycodium#readme"
urls.Issues = "https://github.com/jan-mue/pycodium/issues"
urls.Source = "https://github.com/jan-mue/pycodium"

[dependency-groups]
dev = [
    "coverage==7.9.1",
    "httpx==0.28.1",
    "mypy==1.16.0",
    "pytest==8.4.0",
]

[tool.hatch.build]
packages = [ "pycodium" ]

[tool.hatch.version]
path = "pycodium/version.py"

[tool.ruff]
target-version = "py310"
line-length = 120

lint.select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle errors
    "ERA",  # no commented-out code
    "F",    # pyflakes
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "NPY",  # numpy-specific rules
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "RUF",  # ruff-specific rules
    "S",    # flake8-bandit
    "S101", # don't use assert
    "SIM",  # flake8-simplify
    "TC",   # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
]
lint.ignore = [
    "PLR0913", # Too many arguments in function definition"
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "TC006",   # Add quotes to type expression in `typing.cast()`
]
lint.per-file-ignores."__init__.py" = [ "F401" ]
lint.per-file-ignores."tests/**" = [ "D", "PLR2004", "S101" ]
lint.unfixable = [  ]
lint.flake8-tidy-imports.ban-relative-imports = "all"
lint.isort.known-first-party = [ "pycodium" ]
lint.pydocstyle.convention = "google"

[tool.codespell]
ignore-words-list = "nin"

[tool.pyproject-fmt]
indent = 4
column_width = 120
keep_full_version = true

[tool.coverage.report]
exclude_also = [
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "@(typing(_extensions)?\\.)?overload",
]

[tool.mypy]
strict = true
implicit_reexport = true
enable_error_code = [
    "explicit-override",
    "ignore-without-code",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unimported-reveal",
    "unused-awaitable",
    "unused-ignore",
]
